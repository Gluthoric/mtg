diff --git a/.gitignore b/.gitignore
index 103f9db..15803e2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -111,4 +111,3 @@ notes/scryfall_default_cards.json
 # Allow .aider.conf
 !.aider.conf
 .aider*
-mtg_card_importer/default_cards.json
diff --git a/backend/routes/card_routes.py b/backend/routes/card_routes.py
index fd7f41b..ab19264 100644
--- a/backend/routes/card_routes.py
+++ b/backend/routes/card_routes.py
@@ -36,8 +36,6 @@ from models.set_collection_count import SetCollectionCount
 from database import db
 import orjson
 from decimal import Decimal
-from backend.utils.categorization import get_category_case
-from backend.utils.categorization import get_category_case
 
 card_routes = Blueprint('card_routes', __name__)
 
@@ -181,10 +179,8 @@ def get_collection():
 from collections import defaultdict
 
 from collections import defaultdict
-from sqlalchemy import case, func, cast, Float, and_, or_, else_
-from sqlalchemy.orm import Session, with_loader_criteria
+from sqlalchemy.orm import with_loader_criteria
 from sqlalchemy.sql import asc, desc
-from backend.utils.categorization import get_category_case
 
 @card_routes.route('/collection/sets', methods=['GET'])
 def get_collection_sets():
@@ -226,19 +222,12 @@ def get_collection_sets():
         # Apply sort order
         order_func = desc if sort_order.lower() == 'desc' else asc
 
-        # Get the category case
-        category_case = get_category_case(Card)
-
         # Build the main query to return Set instances
-        query = db.session.query(Set, category_case)\
+        query = db.session.query(Set)\
             .outerjoin(SetCollectionCount, Set.code == SetCollectionCount.set_code)\
-            .outerjoin(Card, Set.code == Card.set_code)\
             .options(
-                subqueryload(Set.cards).load_only(
-                    Card.id, Card.name, Card.prices, Card.quantity_collection_regular,
-                    Card.quantity_collection_foil, Card.frame_effects, Card.promo_types
-                ),
-                joinedload(Set.collection_count)
+                subqueryload(Set.cards),  # Eagerly load related cards
+                joinedload(Set.collection_count)  # Eagerly load collection_count
             )
 
         # Apply filters
diff --git a/backend/routes/set_routes.py b/backend/routes/set_routes.py
index 8ed666e..0f22967 100644
--- a/backend/routes/set_routes.py
+++ b/backend/routes/set_routes.py
@@ -11,8 +11,6 @@ from decimal import Decimal
 import orjson
 import logging
 from datetime import datetime
-from backend.utils.categorization import get_category_case
-from backend.utils.categorization import get_category_case
 
 set_routes = Blueprint('set_routes', __name__)
 logger = logging.getLogger(__name__)
@@ -138,21 +136,24 @@ def get_all_sets():
                 usd_foil_price = float(card.prices.get('usd_foil', 0)) if card.prices and 'usd_foil' in card.prices else 0.0
                 total_value += (usd_price * card.quantity_collection_regular) + (usd_foil_price * card.quantity_collection_foil)
 
-                # Use the get_category_case function
-                category_case = get_category_case(Card)
-                variants_query = db.session.query(
-                    category_case.label('category'),
-                    Card.id,
-                    Card.name,
-                    Card.prices
-                ).filter(Card.set_code == set_instance.code).all()
-
-                for variant in variants_query:
-                    variants[variant.category].append({
-                        'id': variant.id,
-                        'name': variant.name,
-                        'prices': variant.prices
-                    })
+                # Categorize variant cards
+                if card.frame_effects and 'showcase' in card.frame_effects:
+                    category = 'Showcases'
+                elif card.frame_effects and 'extendedart' in card.frame_effects:
+                    category = 'Extended Art'
+                elif card.promo_types and 'fracturefoil' in card.promo_types:
+                    category = 'Fracture Foils'
+                elif card.frame_effects and 'borderless' in card.frame_effects:
+                    category = 'Borderless Cards'
+                elif card.promo_types and 'promo' in card.promo_types:
+                    category = 'Promos'
+                else:
+                    category = 'Art Variants'
+                variants[category].append({
+                    'id': card.id,
+                    'name': card.name,
+                    'prices': card.prices
+                })
 
             set_data['total_value'] = round(total_value, 2)
             set_data['variants'] = variants
diff --git a/backend/tests/test_categorization.py b/backend/tests/test_categorization.py
deleted file mode 100644
index cd1ea23..0000000
--- a/backend/tests/test_categorization.py
+++ /dev/null
@@ -1,101 +0,0 @@
-import unittest
-from backend.utils.categorization import get_category_case
-from models.card import Card
-from sqlalchemy import create_engine
-from sqlalchemy.orm import sessionmaker
-
-class TestCategorization(unittest.TestCase):
-    def setUp(self):
-        # Setup in-memory SQLite for testing
-        self.engine = create_engine('sqlite:///:memory:')
-        Session = sessionmaker(bind=self.engine)
-        self.session = Session()
-        # Create tables as needed
-        Card.metadata.create_all(self.engine)
-    
-    def test_main_set_categorization(self):
-        card = Card(frame_effects=None, promo_types=None)
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Main Set')
-    
-    def test_showcase_categorization(self):
-        card = Card(frame_effects=['showcase'], promo_types=None)
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Showcases')
-    
-    def test_extended_art_categorization(self):
-        card = Card(frame_effects=['extendedart'], promo_types=None)
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Extended Art')
-    
-    def test_fracture_foils_categorization(self):
-        card = Card(frame_effects=None, promo_types=['fracturefoil'])
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Fracture Foils')
-    
-    def test_borderless_cards_categorization(self):
-        card = Card(frame_effects=['borderless'], promo_types=None)
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Borderless Cards')
-    
-    def test_promos_categorization(self):
-        card = Card(frame_effects=None, promo_types=['promo'])
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Promos')
-    
-    def test_art_variants_categorization(self):
-        card = Card(frame_effects=['other'], promo_types=['other'])
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Art Variants')
-    
-    def test_multiple_frame_effects(self):
-        card = Card(frame_effects=['showcase', 'extendedart'], promo_types=None)
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Showcases')  # Assuming 'showcase' takes precedence
-    
-    def test_multiple_promo_types(self):
-        card = Card(frame_effects=None, promo_types=['promo', 'fracturefoil'])
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Fracture Foils')  # Assuming 'fracturefoil' takes precedence
-    
-    def test_empty_arrays(self):
-        card = Card(frame_effects=[], promo_types=[])
-        self.session.add(card)
-        self.session.commit()
-        category_case = get_category_case(Card)
-        result = self.session.query(category_case).filter(Card.id == card.id).one()
-        self.assertEqual(result.category, 'Main Set')
-    
-    def tearDown(self):
-        self.session.close()
-        self.engine.dispose()
-
-if __name__ == '__main__':
-    unittest.main()
diff --git a/backend/utils/categorization.py b/backend/utils/categorization.py
deleted file mode 100644
index 98e6378..0000000
--- a/backend/utils/categorization.py
+++ /dev/null
@@ -1,21 +0,0 @@
-from sqlalchemy import case, and_, or_
-
-def get_category_case(Card):
-    main_set_condition = and_(
-        or_(Card.frame_effects == None, Card.frame_effects == '[]'),
-        or_(Card.promo_types == None, Card.promo_types == '[]')
-    )
-
-    category_case = case(
-        [
-            (Card.frame_effects.contains('"showcase"'), 'Showcases'),
-            (Card.frame_effects.contains('"extendedart"'), 'Extended Art'),
-            (Card.promo_types.contains('"fracturefoil"'), 'Fracture Foils'),
-            (Card.frame_effects.contains('"borderless"'), 'Borderless Cards'),
-            (Card.promo_types.contains('"promo"'), 'Promos'),
-            (main_set_condition, 'Main Set')
-        ],
-        else_='Art Variants'
-    ).label('category')
-
-    return category_case
