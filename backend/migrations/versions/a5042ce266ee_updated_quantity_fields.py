"""Updated quantity fields

Revision ID: a5042ce266ee
Revises: c4c16fcaa592
Create Date: 2024-10-03 09:33:24.638387

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a5042ce266ee'
down_revision = 'c4c16fcaa592'
branch_labels = None
depends_on = None


def upgrade():
    # Drop dependent materialized views before altering the table
    op.execute("DROP MATERIALIZED VIEW IF EXISTS set_collection_counts;")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS total_collection_value;")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS unique_cards_count;")

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('cards', schema=None) as batch_op:
        batch_op.add_column(sa.Column('quantity_regular', sa.BigInteger(), nullable=True))
        batch_op.add_column(sa.Column('quantity_foil', sa.BigInteger(), nullable=True))
        batch_op.drop_index('idx_cards_border_color')
        batch_op.drop_index('idx_cards_colors_gin', postgresql_using='gin')
        batch_op.drop_index('idx_cards_frame_effects', postgresql_using='gin')
        batch_op.drop_index('idx_cards_kiosk_inventory', postgresql_where='((quantity_kiosk_regular > 0) OR (quantity_kiosk_foil > 0))')
        batch_op.drop_index('idx_cards_name_trgm', postgresql_using='gin')
        batch_op.drop_index('idx_cards_prices_usd')
        batch_op.drop_index('idx_cards_prices_usd_foil')
        batch_op.drop_index('idx_cards_promo_types', postgresql_using='gin')
        batch_op.drop_index('idx_cards_search', postgresql_using='gin')
        batch_op.drop_index('idx_cards_search_vector', postgresql_using='gin')
        batch_op.drop_index('idx_cards_set_collection')
        batch_op.drop_index('idx_cards_type_line_trgm', postgresql_using='gin')
        batch_op.drop_column('quantity_collection_foil')
        batch_op.drop_column('set_id')
        batch_op.drop_column('quantity_collection_regular')
        batch_op.drop_column('search_vector')

    with op.batch_alter_table('sets', schema=None) as batch_op:
        batch_op.drop_index('idx_sets_code')

    # Recreate materialized views with updated column names
    op.execute("""
    CREATE MATERIALIZED VIEW set_collection_counts AS
    SELECT
        set_code,
        SUM(quantity_regular + quantity_foil) AS collection_count
    FROM cards
    GROUP BY set_code;
    """)

    op.execute("""
    CREATE MATERIALIZED VIEW total_collection_value AS
    SELECT
        SUM(
            (CAST(prices->>'usd' AS FLOAT) * quantity_regular) +
            (CAST(prices->>'usd_foil' AS FLOAT) * quantity_foil)
        ) AS total_value
    FROM cards;
    """)

    op.execute("""
    CREATE MATERIALIZED VIEW unique_cards_count AS
    SELECT
        COUNT(DISTINCT id) AS unique_cards
    FROM cards
    WHERE quantity_regular > 0 OR quantity_foil > 0;
    """)
    # ### end Alembic commands ###


def downgrade():
    # Drop materialized views with new column references
    op.execute("DROP MATERIALIZED VIEW IF EXISTS set_collection_counts;")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS total_collection_value;")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS unique_cards_count;")

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sets', schema=None) as batch_op:
        batch_op.create_index('idx_sets_code', ['code'], unique=True)

    with op.batch_alter_table('cards', schema=None) as batch_op:
        batch_op.add_column(sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('quantity_collection_regular', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('set_id', sa.UUID(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('quantity_collection_foil', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True))
        batch_op.create_index('idx_cards_type_line_trgm', ['type_line'], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_cards_set_collection', ['set_code', 'name'], unique=False)
        batch_op.create_index('idx_cards_search_vector', ['search_vector'], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_cards_search', [sa.text("to_tsvector('english'::regconfig, (name || ' '::text) || type_line)")], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_cards_promo_types', ['promo_types'], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_cards_prices_usd_foil', [sa.text("(prices ->> 'usd_foil'::text)")], unique=False)
        batch_op.create_index('idx_cards_prices_usd', [sa.text("(prices ->> 'usd'::text)")], unique=False)
        batch_op.create_index('idx_cards_name_trgm', ['name'], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_cards_kiosk_inventory', ['id'], unique=False, postgresql_where='((quantity_kiosk_regular > 0) OR (quantity_kiosk_foil > 0))')
        batch_op.create_index('idx_cards_frame_effects', ['frame_effects'], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_cards_colors_gin', ['colors'], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_cards_border_color', ['border_color'], unique=False)
        batch_op.drop_column('quantity_foil')
        batch_op.drop_column('quantity_regular')

    # Recreate materialized views with original column names
    op.execute("""
    CREATE MATERIALIZED VIEW set_collection_counts AS
    SELECT
        set_code,
        SUM(quantity_collection_regular + quantity_collection_foil) AS collection_count
    FROM cards
    GROUP BY set_code;
    """)

    op.execute("""
    CREATE MATERIALIZED VIEW total_collection_value AS
    SELECT
        SUM(
            (CAST(prices->>'usd' AS FLOAT) * quantity_collection_regular) +
            (CAST(prices->>'usd_foil' AS FLOAT) * quantity_collection_foil)
        ) AS total_value
    FROM cards;
    """)

    op.execute("""
    CREATE MATERIALIZED VIEW unique_cards_count AS
    SELECT
        COUNT(DISTINCT id) AS unique_cards
    FROM cards
    WHERE quantity_collection_regular > 0 OR quantity_collection_foil > 0;
    """)
    # ### end Alembic commands ###
