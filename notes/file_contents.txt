Certainly! I'd be happy to help you modify your Kiosk page to look like the Collection page, displaying only the sets that have at least one card in the kiosk with a quantity of 1 or more. Below, I'll provide the updated code for Kiosk.vue, along with explanations and any additional components needed.
Overview of Your Request:

    Goal: Make the Kiosk page (Kiosk.vue) resemble the Collection page (Collection.vue), but only list sets that have cards in the kiosk with a quantity of 1 or more.
    Requirements:
        Display sets instead of individual cards.
        Only include sets that have cards in the kiosk with quantity ≥ 1.
        Maintain consistency in styling and layout with the Collection page.

Steps to Achieve This:

    Update Kiosk.vue to Display Sets:
        Modify Kiosk.vue to fetch and display sets, similar to how Collection.vue does.
        Adjust data properties, methods, and the template to handle sets instead of cards.

    Fetch Sets with Cards in Kiosk:
        Ensure there's an API endpoint that returns sets containing cards in the kiosk with quantity ≥ 1 (e.g., /api/kiosk/sets).
        If such an endpoint doesn't exist, we might need to process the cards data to extract sets (though it's preferable to handle this on the backend for efficiency).

    Create a Route and Component for Viewing Cards in a Set:
        Add a route for viewing the cards in a particular set within the kiosk (e.g., KioskSetCards.vue).
        Create KioskSetCards.vue similar to CollectionSetCards.vue, but fetching cards from the kiosk.

    Update router/index.js to Include the New Route:

Updated Code:
1. Kiosk.vue

vue

<!-- Kiosk.vue -->
<template>
  <div class="container">
    <h1 class="text-center mb-2">Kiosk Inventory</h1>
    <!-- Optional: Add stats if needed -->
    <SetListControls
      :setTypes="setTypes"
      :totalPages="totalPages"
      @update-filters="updateFilters"
      @update-sorting="updateSorting"
      @update-per-page="updatePerPage"
    />
    <div v-if="loading" class="loading text-center mt-1">Loading...</div>
    <div v-else-if="error" class="error text-center mt-1">{{ error }}</div>
    <div v-else-if="sets && sets.length > 0" class="set-grid grid grid-cols-auto">
      <div v-for="set in sets" :key="set.code" class="card">
        <router-link :to="{ name: 'KioskSetCards', params: { setCode: set.code } }">
          <div class="set-icon">
            <img :src="set.icon_svg_uri" :alt="set.name" />
          </div>
          <h3>{{ set.name }}</h3>
          <p>Code: {{ set.code }}</p>
          <p>Type: {{ set.set_type }}</p>
          <p>Released: {{ formatDate(set.released_at) }}</p>
          <p>Kiosk Cards: {{ set.kiosk_count }} / {{ set.card_count }}</p>
          <p>Completion: {{ Math.round(set.kiosk_percentage) }}%</p>
          <div class="progress-container">
            <div
              class="progress-bar"
              :style="{ width: `${set.kiosk_percentage}%`, backgroundColor: getProgressColor(set.kiosk_percentage) }"
            ></div>
          </div>
        </router-link>
      </div>
    </div>
    <div v-else-if="!loading && sets.length === 0" class="text-center mt-1">
      <p>No sets found in your kiosk inventory.</p>
    </div>
    <div class="pagination text-center mt-2">
      <button @click="changePage(-1)" :disabled="currentPage === 1">Previous</button>
      <span class="p-1">Page {{ currentPage }} of {{ totalPages }}</span>
      <button @click="changePage(1)" :disabled="currentPage === totalPages">Next</button>
    </div>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import axios from 'axios'
import SetListControls from '../components/SetListControls.vue'

export default {
  name: 'Kiosk',
  components: {
    SetListControls
  },
  setup() {
    const sets = ref([])
    const loading = ref(true)
    const error = ref(null)
    const filters = ref({})
    const sorting = ref({ sortBy: 'released_at', sortOrder: 'desc' })
    const currentPage = ref(1)
    const totalPages = ref(1)
    const perPage = ref(20)
    const setTypes = ref([
      'core', 'expansion', 'masters', 'draft_innovation', 'funny',
      'starter', 'box', 'promo', 'token', 'memorabilia'
    ])

    const fetchSets = async () => {
      loading.value = true
      error.value = null
      try {
        const response = await axios.get('/api/kiosk/sets', {
          params: {
            ...filters.value,
            ...sorting.value,
            page: currentPage.value,
            per_page: perPage.value
          }
        })
        sets.value = response.data.sets
        totalPages.value = response.data.pages
        currentPage.value = response.data.current_page
      } catch (err) {
        console.error('Error fetching kiosk sets:', err)
        error.value = 'Failed to load kiosk sets'
      } finally {
        loading.value = false
      }
    }

    const updateFilters = (newFilters) => {
      filters.value = { ...filters.value, ...newFilters }
      currentPage.value = 1
      fetchSets()
    }

    const updateSorting = (newSorting) => {
      sorting.value = { ...newSorting }
      fetchSets()
    }

    const updatePerPage = (newPerPage) => {
      perPage.value = newPerPage
      currentPage.value = 1
      fetchSets()
    }

    const changePage = (delta) => {
      const newPage = currentPage.value + delta
      if (newPage >= 1 && newPage <= totalPages.value) {
        currentPage.value = newPage
        fetchSets()
      }
    }

    const formatDate = (dateString) => {
      return new Date(dateString).toLocaleDateString()
    }

    const getProgressColor = (percentage) => {
      if (percentage < 25) return '#f44336'
      if (percentage < 50) return '#ff9800'
      if (percentage < 75) return '#ffc107'
      return '#4caf50'
    }

    onMounted(() => {
      fetchSets()
    })

    return {
      sets,
      loading,
      error,
      filters,
      sorting,
      currentPage,
      totalPages,
      perPage,
      setTypes,
      updateFilters,
      updateSorting,
      updatePerPage,
      changePage,
      formatDate,
      getProgressColor
    }
  }
}
</script>

<style scoped>
.set-icon {
  width: 50px;
  height: 50px;
  margin: 0 auto 1rem;
}

.set-icon img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}
</style>

Explanation:

    Data Properties:
        Replaced cards with sets.
        Added loading, error, filters, sorting, currentPage, totalPages, perPage, setTypes.

    Methods:
        Created fetchSets to fetch sets from the new API endpoint /api/kiosk/sets.
        Added updateFilters, updateSorting, updatePerPage, and changePage methods, similar to Collection.vue.

    Template:
        Used SetListControls for filtering and sorting.
        Displayed sets in a grid, similar to Collection.vue.
        Each set card links to a new component KioskSetCards.vue.

Note: The endpoint /api/kiosk/sets should return a list of sets that have cards in the kiosk with quantity ≥ 1, along with the necessary data for each set (e.g., kiosk_count, kiosk_percentage).